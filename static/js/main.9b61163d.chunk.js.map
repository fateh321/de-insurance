{"version":3,"sources":["NavBar/MenuItems.js","assets/img/logo.svg","NavBar/NavBar.js","constants/events.js","ethereumFunctions.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","CoinSwapper/InputDialog.js","Components/LoadingButton.js","Components/SplitButton.js","Liquidity/components/InputField.js","CoinSwapper/Stepper.js","CoinSwapper/CoinSwapper.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/components/Stepper.js","Liquidity/MintBurnLiquidity.js","Liquidity/Liquidity.js","Components/connectWalletPage.js","Oracle/LiquidityFunctions.js","Oracle/OracleDeployer.js","Oracle/Oracle.js","NavBar/VerticalBar.js","NavBar/Drawer.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","Component","USDC","WETH","UNISWAP","DEADLINE","name","EVENTADDR","event","exchnge","ORACLE","ALLEVENTS","array","ERC20","require","FACTORY","PAIR","EVENT","CORE","INSTOKEN","getProvider","ethers","providers","Web3Provider","window","ethereum","getSigner","provider","getWeth","address","signer","Contract","abi","getAccount","a","request","method","accounts","doesTokenExist","err","getBalanceAndSymbol","accountAddress","eventAddress","console","log","insuranceTokenAddress","insuredToken","providerTokenAddress","providerToken","token","balanceOf","insuranceBalanceRaw","symbol","insuranceSymbol","providerBalanceRaw","providerSymbol","utils","formatEther","balances","symbols","getOptionBalanceAndSymbol","isInsurer","refundPerecent","toNumber","settleRatio","assetTokenRatio","insuranceRedemptionPrice","coverageRedemptionPrice","insuranceToken","ADDRS","getPair","insuranceUniPool","getReserves","reserves","insurancePrice","coverage","reward","amount","coreAddress","time","Math","floor","Date","now","BigNumber","from","amountIn","parseEther","toString","coreContract","mintPositions","burnPositions","redeemPositions","eventUniAddress","uniContract","swap","triggger","duration","oracleAddress","assetAddress","tokenRatio","deployEvent","useStyles","makeStyles","theme","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","CoinField","props","classes","onClick","value","onChange","activeField","placeholder","className","Grid","direction","justifyContent","alignItems","item","xs","Fab","size","variant","InputBase","undefined","disabled","root","button","paddingTop","paddingBottom","coinName","opacity","CoinButton","coinAbbr","ButtonBase","focusRipple","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","withStyles","children","onClose","other","disableTypography","alignContent","IconButton","aria-label","MuiDialogActions","DialogTitle","DialogActions","InputDialog","open","events","heading","isPasteAddress","React","useState","setAddress","error","setError","exit","Dialog","fullWidth","maxWidth","paper","TextField","e","target","helperText","map","index","Button","autoFocus","color","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","SplitButton","options","setOpen","anchorRef","selectedIndex","setSelectedIndex","handleClose","current","contains","ButtonGroup","ref","aria-controls","aria-expanded","aria-haspopup","prevOpen","Popper","sx","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","ClickAwayListener","onClickAway","MenuList","id","autoFocusItem","dense","option","MenuItem","selected","handleMenuItemClick","display","ListItemText","ml","InputField","QontoConnector","styled","StepConnector","stepConnectorClasses","alternativeLabel","right","active","line","completed","palette","mode","grey","borderTopWidth","QontoStepIconRoot","ownerState","fontSize","QontoStepIcon","steps","HorizontalLinearStepper","activeStep","Set","Box","mb","Stepper","connector","label","Step","StepLabel","StepIconComponent","length","mt","flexDirection","pt","flex","paperContainer","switchButton","marginBottom","balance","footer","CoinSwapper","enqueueSnackbar","useSnackbar","account","setAccount","setEventAddress","exchangeAddress","setExchangeAddress","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","dialog3Open","setDialog3Open","setActiveStep","isSelected","input1","setInput1","input2","setInput2","input3","setInput3","isCoin","option2","setOption2","field1Value","setField1Value","field2Value","setField2Value","field3Value","setField3Value","field4Value","setField4Value","setLoading","handleChange","field4","useEffect","coinTimeout","setTimeout","then","data","clearTimeout","inp","EVENTS","Container","Paper","parseFloat","toPrecision","getAddress","buy","catch","message","autoHideDuration","sell","trigger","background","values","buttonIcon","marginRight","LiquidityRemover","MintBurnLiquid","insurance","insuranceSysmbol","coverageSymbol","setBalances","field1","formatBalance","burnOption","burn","mint","redeem","Liquidity","ConnectWalletPage","src","logo","href","paperContainer1","OracleDeployer","field5Value","setField5Value","field6Value","setField6Value","field2","field3","field5","field6","sm","Oracle","createTheme","primary","light","main","dark","contrastText","secondary","drawerWidth","PermanentDrawerLeft","CssBaseline","AppBar","Toolbar","noWrap","component","Drawer","flexShrink","boxSizing","anchor","Divider","Tab","fontWeight","fontFamily","textTransform","Link","to","flexGrow","bgcolor","p","App","maxSnack","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b61163d.chunk.js","sourcesContent":["export const MenuItems = [\r\n  {\r\n    title: \"Marketplace\",\r\n    url: \"/marketplace/\",\r\n    cName: \"nav-links\",\r\n  },\r\n\r\n  {\r\n    title: \"Deploy insurance?\",\r\n    url: \"/oracle/\",\r\n    cName: \"nav-links\",\r\n  },\r\n  {\r\n    title: \"Manage insurance\",\r\n    url: \"/liquidity/\",\r\n    cName: \"nav-links\",\r\n  },\r\n];\r\n","export default __webpack_public_path__ + \"static/media/logo.a6445847.svg\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport logo from \"../assets/img/logo.svg\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n  state = { clicked: false };\r\n\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"Title\">\r\n          <h1 className=\"navbar-logo\">\r\n            <img src={logo} className=\"logo\" width = \"150\" height=\"82\"></img>\r\n          </h1>\r\n        </div>\r\n\r\n        <div className=\"NavbarItems\">\r\n          <ul className={`nav-menu`}>\r\n            {MenuItems.map((item, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <Link className={\"nav-links\"} to={item.url}>\r\n                    {item.title}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n\r\n","export const USDC = {\r\n    isCoin: true,\r\n    isInsurer: false,\r\n    name: \"USDC\",\r\n    abbr: \"USDC\",\r\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\r\n};\r\nexport const WETH = {\r\n    isCoin: true,\r\n    isInsurer: false,\r\n    name: \"WRAPPED ETHEREUM\",\r\n    abbr: \"WETH\",\r\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\r\n};\r\n\r\nexport const WBTC = {\r\n    isCoin: true,\r\n    isInsurer: false,\r\n    name: \"WRAPPED BITCOIN\",\r\n    abbr: \"WBTC\",\r\n    address: \"0xaFF4481D10270F50f203E0763e2597776068CBc5\", // Weth address\r\n};\r\n\r\nexport const UNISWAP = {\r\n    factory: \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\",\r\n    router: \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\r\n};\r\n\r\nexport const DEADLINE = [\r\n    {\r\n        name: \"1 December, 2022\"\r\n    },\r\n    {\r\n        name: \"1 June, 2023\"\r\n    },\r\n    {\r\n        name: \"1 December, 2023\"\r\n    },\r\n    {\r\n        name: \"1 December, 2024\"\r\n    },\r\n];\r\n\r\nexport const EVENTADDR = [\r\n    {\r\n        event: \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\r\n        exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\r\n    },\r\n    {\r\n     event: \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\r\n        exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\r\n    },\r\n    {\r\n     event:   \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\",\r\n     exchnge: \"0xdE37588BE3d92bC80BD55db7B6ECd95714c44DbA\",\r\n    }\r\n];\r\n\r\nexport const ORACLE = [\r\n    {\r\n        name: \"ETH/USDT < 1900\",\r\n    },\r\n    {\r\n        name: \"BTC/USDT < 9000\",\r\n    }\r\n]\r\n\r\nexport const ALLEVENTS = [\r\n    {\r\n     name: ORACLE[0].name,\r\n     array:  [\r\n         {\r\n             name: USDC.name,\r\n             array: [{name: DEADLINE[0].name,\r\n                 array: [EVENTADDR[0].event, EVENTADDR[0].exchnge]\r\n             }, ]\r\n         },\r\n         {\r\n             name: WBTC.name,\r\n             array: [{name: DEADLINE[1].name,\r\n                 array: [EVENTADDR[1].event, EVENTADDR[1].exchnge]\r\n             }]\r\n         }\r\n         ]\r\n    },\r\n\r\n    {\r\n     name: ORACLE[1].name,\r\n     array: [\r\n         {  name: USDC.name,\r\n            array: [\r\n                {\r\n             name: DEADLINE[0].name,\r\n                array: [EVENTADDR[2].event, EVENTADDR[2].exchnge]\r\n             }\r\n         ]\r\n         },\r\n          ]\r\n    }\r\n\r\n]","import { Contract, ethers } from \"ethers\";\r\nimport * as COINS from \"./constants/coins\";\r\nimport * as ADDRS from \"./constants/events\";\r\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\r\nconst ERC20 = require(\"./build/ERC20.json\");\r\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\r\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\r\nconst EVENT = require(\"./build/DeInsurance/Event.json\");\r\nconst CORE = require(\"./build/DeInsurance/Core_v2.json\");\r\nconst INSTOKEN = require(\"./build/DeInsurance/InsuranceToken\");\r\n\r\nexport function getProvider() {\r\n  return new ethers.providers.Web3Provider(window.ethereum);\r\n}\r\n\r\nexport function getSigner(provider) {\r\n  return provider.getSigner();\r\n}\r\n\r\nexport function getRouter(address, signer) {\r\n  return new Contract(address, ROUTER.abi, signer);\r\n}\r\n\r\nexport function getCore(address, signer) {\r\n  return new Contract(address, CORE.abi, signer);\r\n}\r\n\r\nexport function getEvent(address, signer) {\r\n  return new Contract(address, EVENT.abi, signer);\r\n}\r\n\r\nexport function getWeth(address, signer) {\r\n  return new Contract(address, ERC20.abi, signer);\r\n}\r\n\r\nexport function getFactory(address, signer) {\r\n  return new Contract(address, FACTORY.abi, signer);\r\n}\r\n\r\nexport async function getAccount() {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  return accounts[0];\r\n}\r\n\r\n//This function checks if a ERC20 token exists for a given address\r\n//    `address` - The Ethereum address to be checked\r\n//    `signer` - The current signer\r\nexport function doesTokenExist(address, signer) {\r\n  try {\r\n    return new Contract(address, ERC20.abi, signer);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\r\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function getBalanceAndSymbol(\r\n  accountAddress,\r\n  eventAddress,\r\n  provider,\r\n  signer\r\n) {\r\n  console.log(\"Checking balances for real now\");\r\n  console.log(accountAddress);\r\n  console.log(eventAddress);\r\n  //try {\r\n    const event = new Contract(eventAddress, EVENT.abi, signer);\r\n    const insuranceTokenAddress = event.insuredToken();\r\n    const providerTokenAddress = event.providerToken();\r\n\r\n    let token = new Contract(insuranceTokenAddress, INSTOKEN.abi, signer);\r\n    const insuranceBalanceRaw = await token.balanceOf(accountAddress);\r\n    const insuranceSymbol = await token.symbol();\r\n\r\n    token =  new Contract(providerTokenAddress, INSTOKEN.abi, signer);\r\n    const providerBalanceRaw = await token.balanceOf(accountAddress);\r\n    const providerSymbol = await token.symbol();\r\n\r\n    console.log(\"balance: \", ethers.utils.formatEther(insuranceBalanceRaw), insuranceSymbol);\r\n    return {\r\n      balances: [ethers.utils.formatEther(insuranceBalanceRaw), ethers.utils.formatEther(providerBalanceRaw)],\r\n      symbols: [insuranceSymbol, providerSymbol]\r\n    };\r\n  //} catch (err) {\r\n //   return false;\r\n // }\r\n}\r\n// the following function fetches the balance of user as an insurer and insured.\r\nexport async function getOptionBalanceAndSymbol(\r\n    isInsurer,\r\n    accountAddress,\r\n    eventAddress,\r\n    provider,\r\n    signer\r\n) {\r\n  console.log(\"fetching coverage for real now\");\r\n  //try {\r\n      console.log(\"fetching coverage for real now\");\r\n      console.log(eventAddress);\r\n      const event = new Contract(eventAddress, EVENT.abi, signer);\r\n\r\n      const settleRatio = (await event.refundPerecent()).toNumber()/100; //settleRatio is x100 in the contract to ease Solidity division\r\n      const assetTokenRatio = (await event.assetTokenRatio()).toNumber();\r\n\r\n      const insuranceRedemptionPrice = (1 - settleRatio) / assetTokenRatio;\r\n      const coverageRedemptionPrice = settleRatio / assetTokenRatio;\r\n     \r\n      const insuranceToken = await event.insuredToken();\r\n      const insuranceUniPool = await (new Contract(ADDRS.UNISWAP.factory, FACTORY.abi, signer)).getPair(insuranceToken, ADDRS.WETH.address);\r\n      const reserves = await (new Contract(insuranceUniPool, PAIR.abi, signer).getReserves());\r\n      const insurancePrice = reserves[0]/reserves[1];\r\n\r\n      const reward = insurancePrice - insuranceRedemptionPrice + 0.001; //from whitepaper\r\n      const coverage = (2*coverageRedemptionPrice - 1 / assetTokenRatio)/reward;\r\n\r\n      console.log(\"settle ratio: \", settleRatio);\r\n      console.log(\"redemption price: \", insuranceRedemptionPrice);\r\n      console.log(\"insuance price: \", insurancePrice);\r\n      console.log(\"reward: \", reward);\r\n      console.log(\"coverage: \", coverage);\r\n\r\n      return {\r\n        coverage: coverage,\r\n      };\r\n\r\n      // const symbol = \"\";//await token.symbol();\r\n      // // should return based on whether the staker is insurer or insured\r\n      // if(isInsurer){\r\n      //   return {\r\n      //     balance: ethers.utils.formatEther(balances[0]),\r\n      //     symbol: symbol,\r\n      //   };\r\n      // }else{\r\n      //   return {\r\n      //     balance: ethers.utils.formatEther(balances[1]),\r\n      //     symbol: symbol,\r\n      //   };\r\n      // }\r\n\r\n  // } catch (err) {\r\n  //   console.log(\"fetching coverage for real now-part 2\");\r\n  //   return false;\r\n  // }\r\n}\r\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\r\n// No error handling is done, so any issues can be caught with the use of .catch()\r\n// To work correctly, there needs to be 7 arguments:\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `amount` - A float or similar number representing the value of address1's token to trade\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `signer` - The current signer\r\nexport async function swapTokens(\r\n  address1,\r\n  address2,\r\n  amount,\r\n  routerContract,\r\n  accountAddress,\r\n  signer\r\n) {\r\n  const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n  const amountOut = await routerContract.callStatic.getAmountsOut(\r\n    amountIn,\r\n    tokens\r\n  );\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  await token1.approve(routerContract.address, amountIn);\r\n\r\n  if (address1 === COINS.AUTONITY.address) {\r\n    // Eth -> Token\r\n    await routerContract.swapExactETHForTokens(\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline,\r\n      { value: amountIn }\r\n    );\r\n  } else if (address2 === COINS.AUTONITY.address) {\r\n    // Token -> Eth\r\n    await routerContract.swapExactTokensForETH(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  } else {\r\n    await routerContract.swapExactTokensForTokens(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n// this function is supposed to be used to buy or provide insurance cover\r\nexport async function stake(\r\n    isInsurer,\r\n    tokenAddress,\r\n    amount,\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  console.log(eventAddress);\r\n  console.log(tokenAddress);\r\n  // const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n   console.log(amountIn);\r\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\r\n  //     amountIn,\r\n  //     tokens\r\n  // );\r\n  console.log(\"stake1\");\r\n  //const token = new Contract(tokenAddress, ERC20.abi, signer);\r\n  console.log(\"stake2\");\r\n  //await token.approve(coreAddress, amountIn);\r\n  console.log(\"stake3\");\r\n\r\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n  if (isInsurer){\r\n    console.log(\"stake5\");\r\n    await coreContract.provideInsurance(\r\n        eventAddress,\r\n        tokenAddress,\r\n        amountIn\r\n    )\r\n    console.log(\"stake5a\");\r\n  }else{\r\n    console.log(\"stake6\");\r\n    await coreContract.pruchaseInsurance(\r\n        eventAddress,\r\n        tokenAddress,\r\n        amountIn\r\n    )\r\n    console.log(\"stake6a\");\r\n  }\r\n\r\n}\r\n\r\n// this function is supposed to mint tokens\r\nexport async function mint(\r\n    amount,\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  console.log(eventAddress);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n  console.log(amountIn);\r\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\r\n  //     amountIn,\r\n  //     tokens\r\n  // );\r\n\r\n  console.log(\"stake3\");\r\n\r\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n    await coreContract.mintPositions(\r\n        eventAddress,\r\n        amountIn\r\n    )\r\n    console.log(\"stake5a\");\r\n\r\n}\r\n// this function is supposed to burn tokens\r\nexport async function burn(\r\n    amount,\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  console.log(eventAddress);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n  console.log(amountIn);\r\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\r\n  //     amountIn,\r\n  //     tokens\r\n  // );\r\n\r\n  console.log(\"stake3\");\r\n\r\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n  await coreContract.burnPositions(\r\n      eventAddress,\r\n      amountIn\r\n  )\r\n  console.log(\"stake5a\");\r\n\r\n}\r\n// this function is supposed to burn tokens\r\nexport async function redeem(\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  console.log(eventAddress);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n\r\n  console.log(\"stake3\");\r\n\r\n  const coreContract = new Contract(coreAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n  await coreContract.redeemPositions(\r\n      eventAddress\r\n  )\r\n  console.log(\"stake5a\");\r\n\r\n}\r\n// this function is supposed to buy insured tokens\r\nexport async function buy(\r\n    amount,\r\n    eventUniAddress,\r\n    signer\r\n) {\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n  console.log(amountIn);\r\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\r\n  //     amountIn,\r\n  //     tokens\r\n  // );\r\n\r\n  console.log(\"stake3\");\r\n\r\n  const uniContract = new Contract(eventUniAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n  await uniContract.swap(\r\n      amountIn\r\n  )\r\n  console.log(\"stake5a\");\r\n\r\n}\r\n// this function is supposed to sell tokens\r\nexport async function sell(\r\n    amount,\r\n    eventUniAddress,\r\n    signer\r\n) {\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const amountIn = ethers.utils.parseEther(amount.toString());\r\n  console.log(amountIn);\r\n  // const amountOut = await routerContract.callStatic.getAmountsOut(\r\n  //     amountIn,\r\n  //     tokens\r\n  // );\r\n\r\n  console.log(\"stake3\");\r\n\r\n  const uniContract = new Contract(eventUniAddress, CORE.abi, signer);\r\n  console.log(\"stake4\");\r\n\r\n  await uniContract.swap(\r\n      amountIn\r\n  )\r\n  console.log(\"stake5a\");\r\n\r\n}\r\nexport async function trigger(\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  const event = new Contract(eventAddress, EVENT.abi, signer);\r\n  const result = await event.triggger(true);\r\n}\r\n\r\nexport async function deployEvent(\r\n    name,\r\n    duration,\r\n    oracleAddress,\r\n    assetAddress,\r\n    settleRatio,\r\n    tokenRatio,\r\n    coreAddress,\r\n    signer\r\n) {\r\n  // const _duration = BigInt(duration.toString());\r\n  // const _settleRatio = BigInt(settleRatio.toString());\r\n  // const _tokenRatio = BigInt(tokenRatio.toString());\r\n  const coreContract= new Contract(coreAddress, CORE.abi, signer);\r\n  const result = await coreContract.deployEvent(name, duration, oracleAddress, assetAddress, settleRatio, tokenRatio);\r\n}\r\nexport async function withdraw(\r\n    isInsurer,\r\n    tokenAddress,\r\n    amount,\r\n    coreAddress,\r\n    eventAddress,\r\n    signer\r\n) {\r\n  const dummy = 3;\r\n}\r\n\r\n//This function returns the conversion rate between two token addresses\r\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\r\n//    `amountIn` - Amount of the token at address 1 to be swaped from\r\n//    `routerContract` - The router contract to carry out this swap\r\nexport async function getAmountOut(\r\n  address1,\r\n  address2,\r\n  amountIn,\r\n  routerContract\r\n) {\r\n  try {\r\n    const values_out = await routerContract.getAmountsOut(\r\n      ethers.utils.parseEther(amountIn),\r\n      [address1, address2]\r\n    );\r\n    const amount_out = ethers.utils.formatEther(values_out[1]);\r\n    return Number(amount_out);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\r\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\r\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\r\n//    `pair` - The pair contract for the two tokens\r\nexport async function fetchReserves(address1, address2, pair) {\r\n  try {\r\n    const reservesRaw = await pair.getReserves();\r\n    let results = [\r\n      Number(ethers.utils.formatEther(reservesRaw[0])),\r\n      Number(ethers.utils.formatEther(reservesRaw[1])),\r\n    ];\r\n\r\n    return [\r\n      (await pair.token0()) === address1 ? results[0] : results[1],\r\n      (await pair.token1()) === address2 ? results[1] : results[0],\r\n    ];\r\n  } catch (err) {\r\n    console.log(\"no reserves yet\");\r\n    return [0, 0];\r\n  }\r\n}\r\n\r\n// this function is supposed to fetch the total stakes\r\nexport async function fetchStakes(pair) {\r\n  try {\r\n    const reservesRaw = await pair.getReserves();\r\n    let results = [\r\n      Number(ethers.utils.formatEther(reservesRaw[0])),\r\n      Number(ethers.utils.formatEther(reservesRaw[1])),\r\n    ];\r\n\r\n    return results;\r\n  } catch (err) {\r\n    console.log(\"no reserves yet\");\r\n    return [0, 0];\r\n  }\r\n}\r\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\nexport async function getReserves(\r\n  address1,\r\n  address2,\r\n  eventAddress,\r\n  signer,\r\n  accountAddress\r\n) {\r\n  console.log(\"Reserves\");\r\n//  const pairAddress = await factory.getPair(address1, address2);\r\n  const event = new Contract(eventAddress, EVENT.abi, signer);\r\n\r\n  let insurance = await event.totalInsurance();\r\n  let premiums = await event.totalPremiums();\r\n  insurance = ethers.utils.formatEther(insurance);\r\n  premiums = ethers.utils.formatEther(premiums);\r\n  console.log(insurance);\r\n  console.log(premiums);\r\n  if (insurance === \"0.0\") {\r\n    premiums = \"0.0\";\r\n  }\r\n//  const liquidityTokens_BN = await pair.balanceOf(accountAddress);\r\n//  const liquidityTokens = Number(\r\n//    ethers.utils.formatEther(liquidityTokens_BN)\r\n//  ).toFixed(2);\r\n\r\n  return [\r\n    insurance,//.toFixed(2),\r\n    premiums,//.toFixed(2),\r\n    0,//liquidityTokens,\r\n  ];\r\n}\r\n","import React from \"react\";\r\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    backgroundColor: COLORS.grey[50],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n  },\r\n  container_input: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"68px\",\r\n    backgroundColor: COLORS.grey[50],\r\n    borderRadius: theme.spacing(2),\r\n    borderColor: COLORS.grey[300],\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\",\r\n    marginLeft: \"50%\",\r\n    textAlign: \"right\",\r\n  },\r\n  container_blank: {\r\n    padding: theme.spacing(1),\r\n    minHeight: \"80px\",\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  grid: {\r\n    height: \"60px\",\r\n  },\r\n  fab: {\r\n    zIndex: \"0\",\r\n  },\r\n  input: {\r\n    ...theme.typography.h5,\r\n    width: \"100%\",\r\n  },\r\n  inputBase: {\r\n    textAlign: \"right\",\r\n  },\r\n}));\r\n\r\nCoinField.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  symbol: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  activeField: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport function RemoveLiquidityField1(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField } = props;\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder=\"0.0\"\r\n            disabled={!activeField}\r\n            classes={{\r\n              root: classes.container_input,\r\n              input: classes.inputBase,\r\n            }}\r\n          />\r\n        </Grid>\r\n        {/* </div> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function RemoveLiquidityField2(props) {\r\n  // This component is used to selecting a coin and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol } = props;\r\n\r\n  return (\r\n    <div className={classes.container_blank}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function CoinField(props) {\r\n  // This component is used to selecting a token and entering a value, the props are explained below:\r\n  //      onClick - (string) => void - Called when the button is clicked\r\n  //      symbol - string - The text displayed on the button\r\n  //      value - string - The value of the text field\r\n  //      onChange - (e) => void - Called when the text field changes\r\n  //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n  const classes = useStyles();\r\n  const { onClick, symbol, value, onChange, activeField, placeholder } = props;\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        className={classes.grid}\r\n      >\r\n        {/* Button */}\r\n        <Grid item xs={3}>\r\n          <Fab\r\n            size=\"small\"\r\n            variant=\"extended\"\r\n            onClick={onClick}\r\n            className={classes.fab}\r\n          >\r\n            {symbol}\r\n            <ExpandMoreIcon />\r\n          </Fab>\r\n        </Grid>\r\n\r\n        {/* Text Field */}\r\n        <Grid item xs={9}>\r\n          <InputBase\r\n            value={value}\r\n            onChange={onChange}\r\n            placeholder={placeholder!==undefined?placeholder.toString():\"0.0\"}\r\n            disabled={!activeField}\r\n            classes={{ root: classes.input, input: classes.inputBase }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5),\r\n    \"&:hover, &$focusVisible\": {\r\n      backgroundColor: COLORS.grey[200],\r\n    },\r\n  },\r\n  coinName: {\r\n    opacity: 0.6,\r\n  },\r\n}));\r\n\r\nCoinButton.propTypes = {\r\n  coinName: PropTypes.string.isRequired,\r\n  coinAbbr: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function CoinButton(props) {\r\n  const { coinName, coinAbbr, onClick, ...other } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\r\n      <Grid container direction=\"column\">\r\n        <Typography variant=\"h6\">{coinAbbr}</Typography>\r\n        <Typography variant=\"body2\" className={classes.coinName}>\r\n          {coinName}\r\n        </Typography>\r\n      </Grid>\r\n    </ButtonBase>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  titleSection: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  titleText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  hr: {\r\n    margin: 0,\r\n  },\r\n  address: {\r\n    paddingLeft: theme.spacing(2.5),\r\n    paddingRight: theme.spacing(2.5),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  coinList: {\r\n    height: \"300px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  coinContainer: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n    paddingTop: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classes.titleSection}\r\n      {...other}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Typography variant=\"h6\" className={classes.titleText}>\r\n          {children}\r\n        </Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Grid>\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n    backgroundColor: COLORS.grey[100],\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nCoinDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  coins: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function CoinDialog(props) {\r\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n  // addresses will first be validated to make sure they exist.\r\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n  const classes = useStyles();\r\n  const { onClose, open, coins, signer, heading, isPasteAddress, ...others } = props;\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  // Called when the user tries to input a custom address, this function will validate the address and will either\r\n  // then close the dialog and return the validated address, or will display an error.\r\n  const submit = () => {\r\n    if (doesTokenExist(address, signer)) {\r\n      exit(address);\r\n    } else {\r\n      setError(\"This address is not valid\");\r\n    }\r\n  };\r\n\r\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n  const exit = (value) => {\r\n    setError(\"\");\r\n    setAddress(\"\");\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => exit(undefined)}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <DialogTitle onClose={() => exit(undefined)}>{heading}</DialogTitle>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <div className={classes.coinContainer}>\r\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n          {isPasteAddress === true &&\r\n          <TextField\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n              variant=\"outlined\"\r\n              placeholder=\"Paste Address\"\r\n              error={error !== \"\"}\r\n              helperText={error}\r\n              fullWidth\r\n              className={classes.address}\r\n          />\r\n          }\r\n          {isPasteAddress === true &&\r\n          <hr className={classes.hr}/>\r\n          }\r\n          <Grid item className={classes.coinList}>\r\n            <Grid container direction=\"column\">\r\n              {/* Maps all of the tokens in the constants file to buttons */}\r\n              {coins.map((coin, index) => (\r\n                <Grid item key={index} xs={12}>\r\n                  <CoinButton\r\n                    coinName={coin.name}\r\n                    coinAbbr={coin.abbr}\r\n                    onClick={() => exit([coin.isCoin, coin.isInsurer, coin.address, coin.abbr, coin.name])}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <DialogActions>\r\n        <Button autoFocus onClick={submit} color=\"primary\">\r\n          Enter\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    Grid,\r\n    IconButton,\r\n    makeStyles,\r\n    TextField,\r\n    Typography,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n    dialogContainer: {\r\n        borderRadius: theme.spacing(2),\r\n    },\r\n    titleSection: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    titleText: {\r\n        alignSelf: \"center\",\r\n    },\r\n    hr: {\r\n        margin: 0,\r\n    },\r\n    address: {\r\n        paddingLeft: theme.spacing(2.5),\r\n        paddingRight: theme.spacing(2.5),\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    coinList: {\r\n        height: \"300px\",\r\n        overflowY: \"scroll\",\r\n    },\r\n    coinContainer: {\r\n        paddingLeft: theme.spacing(0.5),\r\n        paddingRight: theme.spacing(0.5),\r\n        paddingTop: theme.spacing(2),\r\n        marginTop: theme.spacing(2),\r\n        overflow: \"hidden\",\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle\r\n            disableTypography\r\n            className={classes.titleSection}\r\n            {...other}\r\n        >\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                alignContent=\"center\"\r\n            >\r\n                <Typography variant=\"h6\" className={classes.titleText}>\r\n                    {children}\r\n                </Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </Grid>\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n        backgroundColor: COLORS.grey[100],\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nInputDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    events: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function InputDialog(props) {\r\n    // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n    // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n    // addresses will first be validated to make sure they exist.\r\n    // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n    // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n    const classes = useStyles();\r\n    const { onClose, open, events, signer, heading, isPasteAddress, ...others } = props;\r\n\r\n    const [address, setAddress] = React.useState(\"\");\r\n    const [error, setError] = React.useState(\"\");\r\n\r\n    // Called when the user tries to input a custom address, this function will validate the address and will either\r\n    // then close the dialog and return the validated address, or will display an error.\r\n    const submit = () => {\r\n        if (doesTokenExist(address, signer)) {\r\n            exit(address);\r\n        } else {\r\n            setError(\"This address is not valid\");\r\n        }\r\n    };\r\n\r\n    // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n    const exit = (value) => {\r\n        setError(\"\");\r\n        setAddress(\"\");\r\n        onClose(value);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => exit(undefined)}\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            classes={{ paper: classes.dialogContainer }}\r\n        >\r\n            <DialogTitle onClose={() => exit(undefined)}>{heading}</DialogTitle>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <div className={classes.coinContainer}>\r\n                <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n                    {isPasteAddress === true &&\r\n                    <TextField\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Paste Address\"\r\n                        error={error !== \"\"}\r\n                        helperText={error}\r\n                        fullWidth\r\n                        className={classes.address}\r\n                    />\r\n                    }\r\n                    {isPasteAddress === true &&\r\n                    <hr className={classes.hr}/>\r\n                    }\r\n                    <Grid item className={classes.coinList}>\r\n                        <Grid container direction=\"column\">\r\n                            {/* Maps all of the tokens in the constants file to buttons */}\r\n                            {events.map((event, index) => (\r\n                                <Grid item key={index} xs={12}>\r\n                                    <CoinButton\r\n                                        coinName={index+1}\r\n                                        coinAbbr={event.name}\r\n                                        onClick={() => {console.log(\"inp_dial\", event.name); return exit([event.name, index, event.array])}}\r\n                                    />\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <DialogActions>\r\n                <Button autoFocus onClick={submit} color=\"primary\">\r\n                    Enter\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    margin: 0,\r\n    position: \"relative\",\r\n  },\r\n  progress: {\r\n    color: green[500],\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nexport default function LoadingButton(props) {\r\n  const classes = useStyles();\r\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        disabled={loading || !valid}\r\n        type=\"submit\"\r\n        onClick={onClick}\r\n        {...other}\r\n      >\r\n        {children}\r\n      </Button>\r\n      {loading && <CircularProgress size={24} className={classes.progress} />}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport Box from \"@mui/material/Box\";\r\nimport ListItemText from '@mui/material/ListItemText';\r\n// const options = ['Buy', 'Sell'];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        margin: 0,\r\n        position: \"relative\",\r\n    },\r\n    progress: {\r\n        color: green[500],\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n}));\r\nexport default function SplitButton(props) {\r\n    const {onClick, options, ...other} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n    const handleClick = () => (\r\n        onClick[selectedIndex]()\r\n        // onClickArray[selectedIndex]\r\n        // console.info(`You clicked ${options[selectedIndex]}`)\r\n);\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} /*aria-label=\"split button\"*/>\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                    onClick={handleClick}\r\n                >\r\n                    <LoopIcon />\r\n                    {options[selectedIndex]}\r\n\r\n                </Button>\r\n\r\n                <Button\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select action\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                    <ArrowDropDownIcon />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                sx={{\r\n                    zIndex: 1,\r\n                }}\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin:\r\n                                placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        {/*<Box display=\"block\">*/}\r\n                        <Paper\r\n                            variant={\"elevation\"}\r\n                            sx={{ width: 140 }}\r\n                        >\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem dense>\r\n                                    {options.map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={option}\r\n                                            // divider='true'\r\n                                            // disableGutters='true'\r\n                                            // disabled={index === 2}\r\n                                            selected={index === selectedIndex}\r\n                                            onClick={(event) => handleMenuItemClick(event, index)}\r\n                                            sx={{ \r\n                                                '&.MuiButtonBase-root': {\r\n                                                  display: 'flex',\r\n                                                },\r\n                                            }}\r\n                                        >\r\n                                            <ListItemText sx={{ ml:4}}> {option} </ListItemText>\r\n                                        </MenuItem>\r\n                                    ))}\r\n\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                        {/*</Box>*/}\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}","import React from \"react\";\r\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        padding: theme.spacing(1),\r\n        minHeight: \"80px\",\r\n        backgroundColor: COLORS.grey[50],\r\n        borderRadius: theme.spacing(2),\r\n        borderColor: COLORS.grey[300],\r\n        borderWidth: \"1px\",\r\n        borderStyle: \"solid\",\r\n    },\r\n    container_input: {\r\n        padding: theme.spacing(1),\r\n        minHeight: \"68px\",\r\n        backgroundColor: COLORS.grey[50],\r\n        borderRadius: theme.spacing(2),\r\n        borderColor: COLORS.grey[300],\r\n        borderWidth: \"1px\",\r\n        borderStyle: \"solid\",\r\n        marginLeft: \"50%\",\r\n        textAlign: \"right\",\r\n    },\r\n    container_blank: {\r\n        padding: theme.spacing(1),\r\n        minHeight: \"80px\",\r\n        borderRadius: theme.spacing(2),\r\n    },\r\n    grid: {\r\n        height: \"60px\",\r\n    },\r\n    fab: {\r\n        zIndex: \"0\",\r\n    },\r\n    input: {\r\n        ...theme.typography.h5,\r\n        width: \"100%\",\r\n    },\r\n    inputBase: {\r\n        textAlign: \"right\",\r\n    },\r\n}));\r\n\r\nInputField.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    symbol: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func,\r\n    activeField: PropTypes.bool.isRequired,\r\n};\r\n\r\n\r\nexport default function InputField(props) {\r\n    // This component is used to selecting a token and entering a value, the props are explained below:\r\n    //      onClick - (string) => void - Called when the button is clicked\r\n    //      symbol - string - The text displayed on the button\r\n    //      value - string - The value of the text field\r\n    //      onChange - (e) => void - Called when the text field changes\r\n    //      activeField - boolean - Whether text can be entered into this field or not\r\n\r\n    const classes = useStyles();\r\n    const { onClick, symbol, value, onChange, activeField, placeholder } = props;\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                className={classes.grid}\r\n            >\r\n                {/* Text Field */}\r\n                <Grid item xs={9}>\r\n                    <InputBase\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        placeholder={placeholder!==undefined?placeholder.toString():\"0.0\"}\r\n                        disabled={!activeField}\r\n                        classes={{ root: classes.input, input: classes.inputBase }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\r\nimport { styled } from '@mui/material/styles';\r\nimport Check from '@mui/icons-material/Check';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\r\n    [`&.${stepConnectorClasses.alternativeLabel}`]: {\r\n        top: 10,\r\n        left: 'calc(-50% + 16px)',\r\n        right: 'calc(50% + 16px)',\r\n    },\r\n    [`&.${stepConnectorClasses.active}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    [`&.${stepConnectorClasses.completed}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\r\n        borderTopWidth: 3,\r\n        borderRadius: 1,\r\n    },\r\n}));\r\n\r\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\r\n    color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n    ...(ownerState.active && {\r\n        color: '#784af4',\r\n    }),\r\n    '& .QontoStepIcon-completedIcon': {\r\n        color: '#784af4',\r\n        zIndex: 1,\r\n        fontSize: 18,\r\n    },\r\n    '& .QontoStepIcon-circle': {\r\n        width: 8,\r\n        height: 8,\r\n        borderRadius: '50%',\r\n        backgroundColor: 'currentColor',\r\n    },\r\n}));\r\n\r\nfunction QontoStepIcon(props) {\r\n    const { active, completed, className } = props;\r\n\r\n    return (\r\n        <QontoStepIconRoot ownerState={{ active }} className={className}>\r\n            {completed ? (\r\n                <Check className=\"QontoStepIcon-completedIcon\" />\r\n            ) : (\r\n                <div className=\"QontoStepIcon-circle\" />\r\n            )}\r\n        </QontoStepIconRoot>\r\n    );\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n    /**\r\n     * Whether this step is active.\r\n     * @default false\r\n     */\r\n    active: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    /**\r\n     * Mark the step as completed. Is passed to child components.\r\n     * @default false\r\n     */\r\n    completed: PropTypes.bool,\r\n};\r\n\r\nconst steps = ['Select Oracle Id', 'Select available asset (you want to deal in)', 'Select available deadline', 'Provide premium amount'];\r\n\r\nexport default function HorizontalLinearStepper(props) {\r\n    const {activeStep, ...other} = props;\r\n    // const [activeStep, setActiveStep] = React.useState(0);\r\n    const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n    // const isStepOptional = (step) => {\r\n    //     // return step === 1;\r\n    // return false\r\n    // };\r\n\r\n    // const isStepSkipped = (step) => {\r\n    //     return skipped.has(step);\r\n    // };\r\n\r\n    // const handleNext = () => {\r\n    //     let newSkipped = skipped;\r\n    //     if (isStepSkipped(activeStep)) {\r\n    //         newSkipped = new Set(newSkipped.values());\r\n    //         newSkipped.delete(activeStep);\r\n    //     }\r\n    //\r\n    //     setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    //     setSkipped(newSkipped);\r\n    // };\r\n\r\n    // const handleBack = () => {\r\n    //     setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    // };\r\n\r\n    // const handleSkip = () => {\r\n    //     if (!isStepOptional(activeStep)) {\r\n    //         // You probably want to guard against something like this,\r\n    //         // it should never occur unless someone's actively trying to break something.\r\n    //         throw new Error(\"You can't skip a step that isn't optional.\");\r\n    //     }\r\n    //\r\n    //     setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    //     setSkipped((prevSkipped) => {\r\n    //         const newSkipped = new Set(prevSkipped.values());\r\n    //         newSkipped.add(activeStep);\r\n    //         return newSkipped;\r\n    //     });\r\n    // };\r\n\r\n    // const handleReset = () => {\r\n    //     setActiveStep(0);\r\n    // };\r\n\r\n    return (\r\n        <Box sx={{ width: '58%',ml: 70, mb: 1}}>\r\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\r\n                {steps.map((label, index) => {\r\n                    const stepProps = {};\r\n                    const labelProps = {};\r\n                    // if (isStepOptional(index)) {\r\n                    //     labelProps.optional = (\r\n                    //         <Typography variant=\"caption\">Optional</Typography>\r\n                    //     );\r\n                    // }\r\n                    // if (isStepSkipped(index)) {\r\n                    //     stepProps.completed = false;\r\n                    // }\r\n                    return (\r\n                        <Step key={label} {...stepProps}>\r\n                            <StepLabel  StepIconComponent={QontoStepIcon} {...labelProps}>{label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n            {activeStep === steps.length ? (\r\n                <React.Fragment>\r\n                    <Typography sx={{ mt: 2, mb: 1 }}>\r\n                        All steps completed - you can get insured now.\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n                        {/*<Button onClick={handleReset}>Reset</Button>*/}\r\n                    </Box>\r\n                </React.Fragment>\r\n            ) : (\r\n                <React.Fragment>\r\n                    <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        {/*<Button*/}\r\n                        {/*    color=\"inherit\"*/}\r\n                        {/*    disabled={activeStep === 0}*/}\r\n                        {/*    onClick={handleBack}*/}\r\n                        {/*    sx={{ mr: 1 }}*/}\r\n                        {/*>*/}\r\n                        {/*    Back*/}\r\n                        {/*</Button>*/}\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n                        {/*{isStepOptional(activeStep) && (*/}\r\n                        {/*    <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>*/}\r\n                        {/*        Skip*/}\r\n                        {/*    </Button>*/}\r\n                        {/*)}*/}\r\n\r\n                        {/*<Button onClick={handleNext}>*/}\r\n                        {/*    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}*/}\r\n                        {/*</Button>*/}\r\n                    </Box>\r\n                </React.Fragment>\r\n            )}\r\n        </Box>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getCore,\r\n  getEvent,\r\n  getSigner,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves, getOptionBalanceAndSymbol, stake, withdraw, trigger, buy, sell\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport InputDialog from \"./InputDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport SplitButton from \"../Components/SplitButton\";\r\nimport InputField from \"../Liquidity/components/InputField\";\r\nimport * as COINS from \"../constants/coins\";\r\nimport * as EVENTS from \"../constants/events\";\r\nimport {symbol} from \"prop-types\";\r\nimport HorizontalLinearStepper from \"./Stepper\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    backgroundColor: '#dfe1f5'\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the insurance smart contracts\r\n\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\r\n\r\n  const [coreAddress, setCoreAddress] = React.useState(\r\n    \"0xde68D58ba403be67703B903c99932A854A233dEF\"\r\n  );\r\n  const [eventAddress, setEventAddress] = React.useState(\r\n    \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\"\r\n  );\r\n  const [exchangeAddress, setExchangeAddress] = React.useState(\r\n      \"0x8Fb83a2A5bf59AA20C21d56639d4e713C8B18A1f\"\r\n  );\r\n  const [weth, setWeth] = React.useState(\r\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\r\n  );\r\n\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [dialog3Open, setDialog3Open] = React.useState(false);\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  //TODO\r\n\r\n  // Stores data about their respective input\r\n\r\n  const [input1, setInput1] = React.useState({\r\n    isSelected: false,\r\n    index: undefined,\r\n    name: undefined,\r\n  });\r\n\r\n  const [input2, setInput2] = React.useState({\r\n    isSelected: false,\r\n    index: undefined,\r\n    name: undefined,\r\n  });\r\n\r\n  const [input3, setInput3] = React.useState({\r\n    isSelected: false,\r\n    index: undefined,\r\n    name: undefined,\r\n  });\r\n\r\n  const [option2, setOption2] = React.useState({\r\n    isCoin: false,\r\n    isInsurer: false,\r\n    address: undefined,\r\n    balance: undefined,\r\n    symbol: undefined,\r\n    coverage: undefined,\r\n  });\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n  const [field3Value, setField3Value] = React.useState(\"\");\r\n  const [field4Value, setField4Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field4: (e) => {\r\n      setField4Value(e.target.value);\r\n      setActiveStep(4);\r\n    },\r\n  };\r\n\r\n  //Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n  //\r\n  // // Turns the coin's reserves into something nice and readable\r\n  // const formatReserve = (reserve, symbol) => {\r\n  //   if (reserve && symbol) return reserve + \" \" + symbol;\r\n  //   else return \"0.0\";\r\n  // };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  // const isButtonEnabled = () => {\r\n  //   let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\r\n  //\r\n  //   // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n  //   return (\r\n  //     coin1.address &&\r\n  //     coin2.address &&\r\n  //     validFloat.test(field1Value) &&\r\n  //     parseFloat(field1Value) <= coin1.balance\r\n  //   );\r\n  // };\r\n\r\n  const onInput1Selected = (inp) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // We only update the values if the user provides a token\r\n\r\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n    if (inp !== undefined) {\r\n      console.log(\"index\", inp[1]);\r\n      setInput1(\r\n          {\r\n            isSelected: true,\r\n            name: inp[0],\r\n            index: inp[1],\r\n          }\r\n      );\r\n      setField1Value(\r\n          \"Oracle: \"+inp[0]\r\n      )\r\n      setActiveStep(1);\r\n    }\r\n\r\n  };\r\n  const onInput2Selected = (inp) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // We only update the values if the user provides a token\r\n\r\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n    if (inp !== undefined) {\r\n      console.log(\"index\", inp[1]);\r\n      setInput2(\r\n          {\r\n            isSelected: true,\r\n            name: inp[0],\r\n            index: inp[1],\r\n          }\r\n      );\r\n      setField2Value(\r\n         \"Asset: \" +inp[0]\r\n      )\r\n      setActiveStep(2);\r\n    }\r\n\r\n  };\r\n\r\n  const onInput3Selected = (inp) => {\r\n    // Close the dialog window\r\n    setDialog3Open(false);\r\n\r\n    // We only update the values if the user provides a token\r\n\r\n    // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n    if (inp !== undefined) {\r\n      console.log(\"ev_addr\", inp[2].event);\r\n      setInput3(\r\n          {\r\n            isSelected: true,\r\n            name: inp[0],\r\n            index: inp[1],\r\n          }\r\n      );\r\n      setField3Value(\r\n          \"Deadline: \"+inp[0]\r\n      )\r\n      setEventAddress(inp[2][0]);\r\n      setExchangeAddress(inp[2][1]);\r\n      setActiveStep(3);\r\n    }\r\n\r\n  };\r\n\r\n  const buyOption = () => {\r\n    console.log(\"Attempting to stake...\");\r\n    console.log(provider);\r\n    console.log(signer.getAddress());\r\n    setLoading(true);\r\n\r\n    buy(\r\n        parseFloat(field4Value),\r\n        exchangeAddress,\r\n        signer\r\n    )\r\n        .then(() => {\r\n          setLoading(false);\r\n\r\n          // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n          setField1Value(\"\");\r\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n            variant: \"error\",\r\n            autoHideDuration: 10000,\r\n          });\r\n        });\r\n  };\r\n  const sellOption = () => {\r\n    console.log(\"Attempting to stake...\");\r\n    console.log(provider);\r\n    console.log(signer.getAddress());\r\n    setLoading(true);\r\n\r\n    sell(\r\n        parseFloat(field1Value),\r\n        exchangeAddress,\r\n        signer\r\n    )\r\n        .then(() => {\r\n          setLoading(false);\r\n\r\n          // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n          setField1Value(\"\");\r\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n            variant: \"error\",\r\n            autoHideDuration: 10000,\r\n          });\r\n        });\r\n  };\r\n\r\n\r\n  const triggerOption = () => {\r\n    console.log(\"Attempting to trigger...\");\r\n    setLoading(true);\r\n\r\n    trigger(\r\n        coreAddress,\r\n        eventAddress,\r\n        signer\r\n    )\r\n        .then(() => {\r\n          setLoading(false);\r\n          enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n        })\r\n        .catch((e) => {\r\n          setLoading(false);\r\n          enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n            variant: \"error\",\r\n            autoHideDuration: 10000,\r\n          });\r\n        });\r\n  };\r\n\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  // useEffect(() => {\r\n  //   console.log(\r\n  //     \"Trying to get Reserves between:\\n\" + option1.address + \"\\n\" + option2.address\r\n  //   );\r\n  //\r\n  //   if (option1.address) {\r\n  //     getReserves(option1.address, option2.address, eventAddress, signer, account).then(\r\n  //       (data) => setReserves(data)\r\n  //     );\r\n  //   }\r\n  // }, [option1.address, option2.address, account, factory, router, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  // useEffect(() => {\r\n  //   if (isNaN(parseFloat(field1Value))) {\r\n  //     setField2Value(\"\");\r\n  //   } else if (reserves[0] && reserves[1]) {\r\n  //     if (option2.isInsurer){\r\n  //       setField2Value(`${100*reserves[1]/reserves[0]}%`);\r\n  //     }else{\r\n  //       setField2Value(`${100*reserves[0]/reserves[1]}%`);\r\n  //\r\n  //     }\r\n  //\r\n  //     // getAmountOut(coin1.address, coin2.address, field1Value, router).then(\r\n  //     //   (amount) => setField2Value(amount.toFixed(7))\r\n  //     // );\r\n  //   } else {\r\n  //     setField2Value(\"\");\r\n  //   }\r\n  // }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  //This hook creates a timeout that will run every ~5 seconds, it's role is to check if the user's balance \r\n  //has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking coverage...\");\r\n  \r\n        // getReserves(\r\n        //   option1.address,\r\n        //   coin2.address,\r\n        //   eventAddress,\r\n        //   signer,\r\n        //   account\r\n        // ).then((data) => setReserves(data));\r\n      if (account) {\r\n        getOptionBalanceAndSymbol(false, account, eventAddress, provider, signer).then(\r\n          (data) => {\r\n            setOption2({\r\n              isCoin: false,\r\n              isInsurer: false,\r\n              address: eventAddress,\r\n              balance: data.coverage,\r\n              symbol: undefined,\r\n              coverage: data.coverage,\r\n            });\r\n          }\r\n        );\r\n      }\r\n     \r\n        // getBalanceAndSymbol(account, coin2.address, provider, signer).then(\r\n        //   (data) => {\r\n        //     setCoin2({\r\n        //       ...coin2,\r\n        //       balance: data.balance,\r\n        //     });\r\n        //   }\r\n        // );\r\n    }, 5000);\r\n  \r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n  \r\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n  useEffect(() => {\r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <HorizontalLinearStepper\r\n      activeStep = {activeStep}\r\n      />\r\n      {/* Dialog Windows */}\r\n      <InputDialog\r\n        open={dialog1Open}\r\n        onClose={onInput1Selected}\r\n        events={EVENTS.ALLEVENTS}\r\n        signer={signer}\r\n        heading = {\"Select Oracle ID\"}\r\n        isPasteAddress = {false}\r\n      />\r\n      <InputDialog\r\n        open={dialog2Open}\r\n        onClose={onInput2Selected}\r\n        events={input1.isSelected ? EVENTS.ALLEVENTS[input1.index].array : []}\r\n        signer={signer}\r\n        heading = {\"Select asset\"}\r\n        isPasteAddress = {false}\r\n      />\r\n      <InputDialog\r\n          open={dialog3Open}\r\n          onClose={onInput3Selected}\r\n          events={input2.isSelected ? EVENTS.ALLEVENTS[input1.index].array[input2.index].array : []}\r\n          signer={signer}\r\n          heading = {\"Select deadline\"}\r\n          isPasteAddress = {false}\r\n      />\r\n\r\n      {/* insurance marketplace */}\r\n      <Container maxWidth=\"sm\" >\r\n        <Paper className={classes.paperContainer} >\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            How you doin today?\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}  >\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                placeholder={\"Select Oracle Id\"}\r\n                // symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n                symbol={input1.isSelected !== false ? \"Done\" : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                placeholder={\"Select asset\"}\r\n                // symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n                symbol={input2.isSelected !== false ? \"Done\" : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                  activeField={true}\r\n                  value={field3Value}\r\n                  onClick={() => setDialog3Open(true)}\r\n                  placeholder={\"Select deadline\"}\r\n                  // symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n                  symbol={input3.isSelected !== false ? \"Done\" : \"Select\"}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <InputField\r\n                  activeField={true}\r\n                  value={field4Value}\r\n                  onChange={handleChange.field4}\r\n                  onClick={() => setDialog3Open(true)}\r\n                  placeholder={\"Enter premium $\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\">Fetching coverage</Typography>\r\n\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {/*TODO*/}\r\n                  {formatBalance(field4Value*option2.balance, \"USDC\")}\r\n                </Typography>\r\n\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            {/*we don't need to */}\r\n            {/*<Typography variant=\"h6\">Reserves</Typography>*/}\r\n\r\n            {/*<Grid container direction=\"row\" justifyContent=\"space-between\">*/}\r\n            {/*  <Grid item xs={6}>*/}\r\n            {/*    <Typography variant=\"body1\" className={classes.balance}>*/}\r\n            {/*      {formatReserve(reserves[0], option1.symbol!==undefined ? `${option1.symbol} insuring` : \"\")}*/}\r\n            {/*    </Typography>*/}\r\n            {/*  </Grid>*/}\r\n            {/*  <Grid item xs={6}>*/}\r\n            {/*    <Typography variant=\"body1\" className={classes.balance}>*/}\r\n            {/*      {formatReserve(reserves[1], option1.symbol!==undefined ? `${option1.symbol} insured` : \"\")}*/}\r\n            {/*    </Typography>*/}\r\n            {/*  </Grid>*/}\r\n            {/*</Grid>*/}\r\n\r\n\r\n            <SplitButton\r\n            onClick={[buyOption, sellOption]}\r\n            options = {['Buy', 'Sell']}\r\n            >\r\n\r\n            </SplitButton>\r\n            <hr className={classes.hr} />\r\n\r\n              <Grid item xs={6}>\r\n                <LoadingButton\r\n                    loading={loading}\r\n                    valid={true}\r\n                    success={false}\r\n                    fail={false}\r\n                    onClick={triggerOption}\r\n                >\r\n                  <AlarmIcon />\r\n                  Trigger\r\n                </LoadingButton>\r\n              </Grid>\r\n\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          @Becoz-we-can klabs\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;\r\n","import { Contract, ethers } from \"ethers\";\r\nimport * as COINS from \"../constants/coins\";\r\n\r\nimport { fetchReserves } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\r\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\r\n\r\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\r\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(amountIn1),\r\n    Number(amountIn2),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === COINS.AUTONITY.address) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === COINS.AUTONITY.address) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\r\n\r\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\r\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === COINS.AUTONITY.address) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === COINS.AUTONITY.address) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  const amountOut = Math.sqrt(amount2 * amount1);\r\n  return [amount2, amountOut];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    let amountOut = Math.sqrt(reserveA * reserveB);\r\n    return [\r\n      amountADesired.toString(),\r\n      amountBDesired.toString(),\r\n      amountOut.toString(),\r\n    ];\r\n  } else {\r\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      return [\r\n        amountADesired.toString(),\r\n        amountBOptimal.toString(),\r\n        amountOut.toString(),\r\n      ];\r\n    } else {\r\n      let [amountAOptimal, amountOut] = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      console.log(amountAOptimal, amountOut);\r\n      return [\r\n        amountAOptimal.toString(),\r\n        amountBDesired.toString(),\r\n        amountOut.toString(),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  getReserves, getOptionBalanceAndSymbol,\r\n} from \"../ethereumFunctions\";\r\n\r\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\r\n\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport * as COINS from \"../constants/coins\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityDeployer(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\r\n  const [router, setRouter] = React.useState(\r\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\r\n  );\r\n  const [weth, setWeth] = React.useState(\r\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\r\n  );\r\n  const [factory, setFactory] = React.useState(\r\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\r\n  );\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the user's balance of liquidity tokens for the current pair\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Used when getting a quote of liquidity\r\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    let oldField1Value = field1Value;\r\n    let oldField2Value = field2Value;\r\n\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(oldField2Value);\r\n    setField2Value(oldField1Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n    field2: (e) => {\r\n      setField2Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      validFloat.test(field1Value) &&\r\n      validFloat.test(field2Value) &&\r\n      parseFloat(field1Value) <= coin1.balance &&\r\n      parseFloat(field2Value) <= coin2.balance\r\n    );\r\n  };\r\n\r\n  const deploy = () => {\r\n    console.log(\"Attempting to deploy liquidity...\");\r\n    setLoading(true);\r\n\r\n    addLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      parseFloat(field1Value),\r\n      parseFloat(field2Value),\r\n      0,\r\n      0,\r\n      router,\r\n      account,\r\n      signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        setField2Value(\"\");\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });//\"Deployment Failed (\" + e.message + \")\", {\r\n        //  variant: \"error\",\r\n        //  autoHideDuration: 10000,\r\n       // });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (inp) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n    var isInsurer = inp !== undefined ? inp[1] : undefined;\r\n    var abbr = inp!== undefined ? inp[3] : undefined;\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    // if (address === coin2.address) {\r\n    //   switchFields();\r\n    // }\r\n    // We only update the values if the user provides a token\r\n    // else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n    if (isInsurer!==undefined) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getOptionBalanceAndSymbol(isInsurer, account, router.address, provider, signer).then((data) => {\r\n        setCoin1({\r\n          isCoin: false,\r\n          isInsurer: isInsurer,\r\n          address: undefined,\r\n          symbol: abbr,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n    // }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && account) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity deployment.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity deployment\");\r\n\r\n      quoteAddLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        parseFloat(field1Value),\r\n        parseFloat(field2Value),\r\n        factory,\r\n        signer\r\n      ).then((data) => {\r\n        // console.log(data);\r\n        console.log(\"TokenA in: \", data[0]);\r\n        console.log(\"TokenB in: \", data[1]);\r\n        console.log(\"Liquidity out: \", data[2]);\r\n        setLiquidityOut([data[0], data[1], data[2]]);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, field2Value, factory, signer]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1 && account) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2 && account) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  useEffect(() => {\r\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n\r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Liquidity deployer */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={COINS.ALLCONTRACTS}\r\n        signer={signer}\r\n        heading = {\"Select Oracle\"}\r\n        isPasteAddress = {true}\r\n      />\r\n      {/*<CoinDialog*/}\r\n      {/*  open={dialog2Open}*/}\r\n      {/*  onClose={onToken2Selected}*/}\r\n      {/*  coins={COINS.ALL}*/}\r\n      {/*  signer={signer}*/}\r\n      {/*/>*/}\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <CoinField\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n            placeholder = {\"deadline in days\"}\r\n          />\r\n        </Grid>\r\n\r\n        {/*<Grid item xs={12} className={classes.fullWidth}>*/}\r\n        {/*  <CoinField*/}\r\n        {/*    activeField={true}*/}\r\n        {/*    value={field2Value}*/}\r\n        {/*    onClick={() => setDialog2Open(true)}*/}\r\n        {/*    onChange={handleChange.field2}*/}\r\n        {/*    symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}*/}\r\n        {/*  />*/}\r\n        {/*</Grid>*/}\r\n      </Grid>\r\n\r\n      {/*<Grid*/}\r\n      {/*  container*/}\r\n      {/*  direction=\"row\"*/}\r\n      {/*  alignItems=\"center\"*/}\r\n      {/*  justifyContent=\"center\"*/}\r\n      {/*  spacing={4}*/}\r\n      {/*  className={classes.balance}*/}\r\n      {/*>*/}\r\n        {/*<hr className={classes.hr} />*/}\r\n        {/*<Grid*/}\r\n        {/*  container*/}\r\n        {/*  item*/}\r\n        {/*  className={classes.values}*/}\r\n        {/*  direction=\"column\"*/}\r\n        {/*  alignItems=\"center\"*/}\r\n        {/*  spacing={2}*/}\r\n        {/*>*/}\r\n        {/*  /!* Balance Display *!/*/}\r\n        {/*  <Typography variant=\"h6\">Your Balances</Typography>*/}\r\n        {/*  <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\r\n        {/*    <Grid item xs={6}>*/}\r\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*        {formatBalance(coin1.balance, coin1.symbol)}*/}\r\n        {/*      </Typography>*/}\r\n        {/*    </Grid>*/}\r\n        {/*    <Grid item xs={6}>*/}\r\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*        {formatBalance(coin2.balance, coin2.symbol)}*/}\r\n        {/*      </Typography>*/}\r\n        {/*    </Grid>*/}\r\n        {/*  </Grid>*/}\r\n\r\n        {/*  <hr className={classes.hr} />*/}\r\n\r\n        {/*  /!* Reserves Display *!/*/}\r\n        {/*  <Typography variant=\"h6\">Reserves</Typography>*/}\r\n        {/*  <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\r\n        {/*    <Grid item xs={6}>*/}\r\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*        {formatReserve(reserves[0], coin1.symbol)}*/}\r\n        {/*      </Typography>*/}\r\n        {/*    </Grid>*/}\r\n        {/*    <Grid item xs={6}>*/}\r\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*        {formatReserve(reserves[1], coin2.symbol)}*/}\r\n        {/*      </Typography>*/}\r\n        {/*    </Grid>*/}\r\n        {/*  </Grid>*/}\r\n\r\n        {/*  <hr className={classes.hr} />*/}\r\n\r\n        {/*  /!* Liquidity Tokens Display *!/*/}\r\n        {/*  <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>*/}\r\n        {/*  <Grid container direction=\"row\" justifyContent=\"center\">*/}\r\n        {/*    <Grid item xs={6}>*/}\r\n        {/*      <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*        {formatReserve(liquidityTokens, \"UNI-V2\")}*/}\r\n        {/*      </Typography>*/}\r\n        {/*    </Grid>*/}\r\n        {/*  </Grid>*/}\r\n        {/*</Grid>*/}\r\n        {/*<Paper className={classes.paperContainer}>*/}\r\n        {/*  /!*Red  Display to show the quote *!/*/}\r\n        {/*  <Grid*/}\r\n        {/*    container*/}\r\n        {/*    item*/}\r\n        {/*    direction=\"column\"*/}\r\n        {/*    alignItems=\"center\"*/}\r\n        {/*    spacing={2}*/}\r\n        {/*    className={classes.fullWidth}*/}\r\n        {/*  >*/}\r\n        {/*    /!* Tokens in *!/*/}\r\n        {/*    <Typography variant=\"h6\">Tokens in</Typography>*/}\r\n        {/*    <Grid container direction=\"row\" justifyContent=\"space-between\">*/}\r\n        {/*      <Grid item xs={6}>*/}\r\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*          {formatBalance(liquidityOut[0], coin1.symbol)}*/}\r\n        {/*        </Typography>*/}\r\n        {/*      </Grid>*/}\r\n        {/*      <Grid item xs={6}>*/}\r\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*          {formatBalance(liquidityOut[1], coin2.symbol)}*/}\r\n        {/*        </Typography>*/}\r\n        {/*      </Grid>*/}\r\n        {/*    </Grid>*/}\r\n\r\n        {/*    <hr className={classes.hr} />*/}\r\n\r\n        {/*    /!* Liquidity Tokens Display *!/*/}\r\n        {/*    <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>*/}\r\n        {/*    <Grid container direction=\"row\" justifyContent=\"center\">*/}\r\n        {/*      <Grid item xs={6}>*/}\r\n        {/*        <Typography variant=\"body1\" className={classes.balance}>*/}\r\n        {/*          {formatReserve(liquidityOut[2], \"UNI-V2\")}*/}\r\n        {/*        </Typography>*/}\r\n        {/*      </Grid>*/}\r\n        {/*    </Grid>*/}\r\n        {/*  </Grid>*/}\r\n        {/*</Paper>*/}\r\n\r\n        {/*<hr className={classes.hr} />*/}\r\n      {/*</Grid>*/}\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={true}\r\n          success={false}\r\n          fail={false}\r\n          onClick={deploy}\r\n        >\r\n          <AccountBalanceIcon className={classes.buttonIcon} />\r\n          Deploy\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityDeployer;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\r\nimport {\r\n  RemoveLiquidityField1,\r\n  RemoveLiquidityField2,\r\n} from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport * as COINS from \"../constants/coins\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction LiquidityRemover(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n\r\n  // Stores information for the Autonity Network\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\r\n  const [router, setRouter] = React.useState(\r\n    getRouter(\"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\", signer)\r\n  );\r\n  const [weth, setWeth] = React.useState(\r\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\r\n  );\r\n  const [factory, setFactory] = React.useState(\r\n    getFactory(\"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\", signer)\r\n  );\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Stores the liquidity tokens balance of the user\r\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\r\n\r\n  // Stores the input and output for the liquidity removal preview\r\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n    let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\r\n\r\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      validFloat.test(field1Value) &&\r\n      parseFloat(field1Value) <= liquidityTokens\r\n    );\r\n  };\r\n\r\n  const remove = () => {\r\n    console.log(\"Attempting to remove liquidity...\");\r\n    setLoading(true);\r\n\r\n    removeLiquidity(\r\n      coin1.address,\r\n      coin2.address,\r\n      parseFloat(field1Value),\r\n      0,\r\n      0,\r\n      router,\r\n      account,\r\n      signer,\r\n      factory\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address && account) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        }\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\r\n  // It will give a preview of the liquidity removal.\r\n  useEffect(() => {\r\n    if (isButtonEnabled()) {\r\n      console.log(\"Trying to preview the liquidity removal\");\r\n      quoteRemoveLiquidity(\r\n        coin1.address,\r\n        coin2.address,\r\n        field1Value,\r\n        factory,\r\n        signer\r\n      ).then((data) => {\r\n        console.log(data);\r\n        setTokensOut(data);\r\n      });\r\n    }\r\n  }, [coin1.address, coin2.address, field1Value, factory, signer]);\r\n\r\n  useEffect(() => {\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances & Getting reserves...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => {\r\n          setReserves([data[0], data[1]]);\r\n          setLiquidityTokens(data[2]);\r\n        });\r\n      }\r\n\r\n      if (coin1 && account) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2 && account) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  useEffect(() => {\r\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n\r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Coin Swapper */}\r\n      <Typography variant=\"h5\" className={classes.title}></Typography>\r\n\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={COINS.ALL}\r\n        signer={signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={COINS.ALL}\r\n        signer={signer}\r\n      />\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField1\r\n            activeField={true}\r\n            value={field1Value}\r\n            onClick={() => setDialog1Open(true)}\r\n            onChange={handleChange.field1}\r\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} className={classes.fullWidth}>\r\n          <RemoveLiquidityField2\r\n            activeField={true}\r\n            onClick={() => setDialog2Open(true)}\r\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={4}\r\n        className={classes.balance}\r\n      >\r\n        <hr className={classes.hr} />\r\n        <Grid\r\n          container\r\n          item\r\n          className={classes.values}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Balance Display */}\r\n          <Typography variant=\"h6\">Your Balances</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin1.balance, coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatBalance(coin2.balance, coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Reserves Display */}\r\n          <Typography variant=\"h6\">Reserves</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[0], coin1.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(reserves[1], coin2.symbol)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          {/* Liquidity Tokens Display */}\r\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"body1\" className={classes.balance}>\r\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Paper className={classes.paperContainer}>\r\n          {/*Red  Display to show the quote */}\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            className={classes.fullWidth}\r\n          >\r\n            {/* Tokens in */}\r\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[0], \"UNI-V2\")}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Liquidity Tokens Display */}\r\n            <Typography variant=\"h6\">Tokens Out</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[1], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(tokensOut[2], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <hr className={classes.hr} />\r\n      </Grid>\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={isButtonEnabled()}\r\n          success={false}\r\n          fail={false}\r\n          onClick={remove}\r\n        >\r\n          <ArrowDownwardIcon className={classes.buttonIcon} />\r\n          Remove\r\n        </LoadingButton>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidityRemover;\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\r\nimport { styled } from '@mui/material/styles';\r\nimport Check from '@mui/icons-material/Check';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst QontoConnector = styled(StepConnector)(({ theme }) => ({\r\n    [`&.${stepConnectorClasses.alternativeLabel}`]: {\r\n        top: 10,\r\n        left: 'calc(-50% + 16px)',\r\n        right: 'calc(50% + 16px)',\r\n    },\r\n    [`&.${stepConnectorClasses.active}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    [`&.${stepConnectorClasses.completed}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            borderColor: '#784af4',\r\n        },\r\n    },\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\r\n        borderTopWidth: 3,\r\n        borderRadius: 1,\r\n    },\r\n}));\r\n\r\nconst QontoStepIconRoot = styled('div')(({ theme, ownerState }) => ({\r\n    color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n    ...(ownerState.active && {\r\n        color: '#784af4',\r\n    }),\r\n    '& .QontoStepIcon-completedIcon': {\r\n        color: '#784af4',\r\n        zIndex: 1,\r\n        fontSize: 18,\r\n    },\r\n    '& .QontoStepIcon-circle': {\r\n        width: 8,\r\n        height: 8,\r\n        borderRadius: '50%',\r\n        backgroundColor: 'currentColor',\r\n    },\r\n}));\r\n\r\nfunction QontoStepIcon(props) {\r\n    const { active, completed, className } = props;\r\n\r\n    return (\r\n        <QontoStepIconRoot ownerState={{ active }} className={className}>\r\n            {completed ? (\r\n                <Check className=\"QontoStepIcon-completedIcon\" />\r\n            ) : (\r\n                <div className=\"QontoStepIcon-circle\" />\r\n            )}\r\n        </QontoStepIconRoot>\r\n    );\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n    /**\r\n     * Whether this step is active.\r\n     * @default false\r\n     */\r\n    active: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    /**\r\n     * Mark the step as completed. Is passed to child components.\r\n     * @default false\r\n     */\r\n    completed: PropTypes.bool,\r\n};\r\n\r\nconst steps = ['Select Oracle Id', 'Select available asset (you want to deal in)', 'Select available deadline', 'Provide liquidity amount'];\r\n\r\nexport default function HorizontalLinearStepper(props) {\r\n    const {activeStep, ...other} = props;\r\n\r\n    return (\r\n        <Box sx={{ width: '58%',ml: 70, mb: 1}}>\r\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\r\n                {steps.map((label, index) => {\r\n                    const stepProps = {};\r\n                    const labelProps = {};\r\n                    return (\r\n                        <Step key={label} {...stepProps}>\r\n                            <StepLabel  StepIconComponent={QontoStepIcon} {...labelProps}>{label}</StepLabel>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>\r\n            {activeStep === steps.length ? (\r\n                <React.Fragment>\r\n                    <Typography sx={{ mt: 2, mb: 1 }}>\r\n                        All steps completed - you can get insured now.\r\n                    </Typography>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n                    </Box>\r\n                </React.Fragment>\r\n            ) : (\r\n                <React.Fragment>\r\n                    <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\r\n                        <Box sx={{ flex: '1 1 auto' }} />\r\n\r\n                    </Box>\r\n                </React.Fragment>\r\n            )}\r\n        </Box>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    makeStyles,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport AlarmIcon from \"@material-ui/icons/Alarm\";\r\nimport {\r\n    getAccount,\r\n    getFactory,\r\n    getProvider,\r\n    getRouter,\r\n    getCore,\r\n    getEvent,\r\n    getSigner,\r\n    getAmountOut,\r\n    getBalanceAndSymbol,\r\n    getWeth,\r\n    swapTokens,\r\n    getReserves, getOptionBalanceAndSymbol, stake, withdraw, trigger, mint, burn, redeem\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport SplitButton from \"../Components/SplitButton\";\r\nimport InputField from \"./components/InputField\";\r\nimport InputDialog from \"../CoinSwapper/InputDialog\";\r\nimport * as COINS from \"../constants/coins\";\r\nimport {symbol} from \"prop-types\";\r\nimport HorizontalLinearStepper from \"./components/Stepper\";\r\nimport * as EVENTS from \"../constants/events\";\r\n\r\nconst styles = (theme) => ({\r\n    paperContainer: {\r\n        borderRadius: theme.spacing(2),\r\n        padding: theme.spacing(1),\r\n        paddingBottom: theme.spacing(3),\r\n        backgroundColor: '#dfe1f5'\r\n    },\r\n    switchButton: {\r\n        zIndex: 1,\r\n        margin: \"-16px\",\r\n        padding: theme.spacing(0.5),\r\n    },\r\n    fullWidth: {\r\n        width: \"100%\",\r\n    },\r\n    title: {\r\n        textAlign: \"center\",\r\n        padding: theme.spacing(0.5),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    hr: {\r\n        width: \"100%\",\r\n    },\r\n    balance: {\r\n        padding: theme.spacing(1),\r\n        overflow: \"wrap\",\r\n        textAlign: \"center\",\r\n    },\r\n    footer: {\r\n        marginTop: \"285px\",\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction MintBurnLiquid(props) {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    // Stores information for the insurance smart contracts\r\n\r\n    const [provider, setProvider] = React.useState(getProvider());\r\n    const [signer, setSigner] = React.useState(getSigner(provider));\r\n    const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\r\n\r\n    const [coreAddress, setCoreAddress] = React.useState(\r\n        \"0xde68D58ba403be67703B903c99932A854A233dEF\"\r\n    );\r\n    const [eventAddress, setEventAddress] = React.useState(\r\n        \"0x1FbF370cd78dB6023a29471a9B81E81C615601Dd\"\r\n    );\r\n\r\n    // Stores a record of whether their respective dialog window is open\r\n    const [dialog1Open, setDialog1Open] = React.useState(false);\r\n    const [dialog2Open, setDialog2Open] = React.useState(false);\r\n    const [dialog3Open, setDialog3Open] = React.useState(false);\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n    // Stores the current value of their respective text box\r\n    const [field1Value, setField1Value] = React.useState(\"\");\r\n    const [field2Value, setField2Value] = React.useState(\"\");\r\n    const [field3Value, setField3Value] = React.useState(\"\");\r\n    const [field4Value, setField4Value] = React.useState(\"\");\r\n\r\n\r\n    // Controls the loading button\r\n    const [loading, setLoading] = React.useState(false);\r\n    // Stores data about their respective inputs to fetch correct event\r\n    const [input1, setInput1] = React.useState({\r\n        isSelected: false,\r\n        index: undefined,\r\n        name: undefined,\r\n    });\r\n\r\n    const [input2, setInput2] = React.useState({\r\n        isSelected: false,\r\n        index: undefined,\r\n        name: undefined,\r\n    });\r\n\r\n    const [input3, setInput3] = React.useState({\r\n        isSelected: false,\r\n        index: undefined,\r\n        name: undefined,\r\n    });\r\n\r\n    const [balances, setBalances] = React.useState({\r\n        insurance: undefined,\r\n        insuranceSysmbol: undefined,\r\n        coverage: undefined,\r\n        coverageSymbol: undefined,\r\n  });\r\n\r\n\r\n    // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n    const handleChange = {\r\n        field1: (e) => {\r\n            setField1Value(e.target.value);\r\n        },\r\n\r\n            field4: (e) => {\r\n                setField4Value(e.target.value);\r\n                setActiveStep(4);\r\n            },\r\n\r\n    };\r\n\r\n    // Turns the account's balance into something nice and readable\r\n    const formatBalance = (balance, symbol) => {\r\n        console.log(symbol, balance)\r\n        if (balance && symbol)\r\n            return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n        else return \"0.0\";\r\n    };\r\n\r\n    // Turns the coin's reserves into something nice and readable\r\n    // const formatReserve = (reserve, symbol) => {\r\n    //     if (reserve && symbol) return reserve + \" \" + symbol;\r\n    //     else return \"0.0\";\r\n    // };\r\n\r\n    // Determines whether the button should be enabled or not\r\n    // const isButtonEnabled = () => {\r\n    //     let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\r\n    //\r\n    //     // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    //     return (\r\n    //         coin1.address &&\r\n    //         coin2.address &&\r\n    //         validFloat.test(field1Value) &&\r\n    //         parseFloat(field1Value) <= coin1.balance\r\n    //     );\r\n    // };\r\n\r\n    // Called when the dialog window for input1 exits\r\n\r\n    const onInput1Selected = (inp) => {\r\n        // Close the dialog window\r\n        setDialog1Open(false);\r\n\r\n        // We only update the values if the user provides a token\r\n\r\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n        if (inp !== undefined) {\r\n            setInput1(\r\n                {\r\n                    isSelected: true,\r\n                    name: inp[0],\r\n                    index: inp[1],\r\n                }\r\n            );\r\n            setField1Value(\r\n                \"Oracle: \"+inp[0]\r\n            )\r\n            setActiveStep(1);\r\n        }\r\n\r\n    };\r\n    const onInput2Selected = (inp) => {\r\n        // Close the dialog window\r\n        setDialog2Open(false);\r\n\r\n        // We only update the values if the user provides a token\r\n\r\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n        if (inp !== undefined) {\r\n            setInput2(\r\n                {\r\n                    isSelected: true,\r\n                    name: inp[0],\r\n                    index: inp[1],\r\n                }\r\n            );\r\n            setField2Value(\r\n                \"Asset: \" +inp[0]\r\n            )\r\n            setActiveStep(2);\r\n        }\r\n\r\n    };\r\n\r\n    const onInput3Selected = (inp) => {\r\n        // Close the dialog window\r\n        setDialog3Open(false);\r\n\r\n        // We only update the values if the user provides a token\r\n\r\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n        if (inp !== undefined) {\r\n            setInput3(\r\n                {\r\n                    isSelected: true,\r\n                    name: inp[0],\r\n                    index: inp[1],\r\n                }\r\n            );\r\n            setField3Value(\r\n                \"Deadline: \"+inp[0]\r\n            )\r\n            console.log(\"inaa:\", inp[2][0]);\r\n            setEventAddress(inp[2][0]);\r\n            //setExchangeAddress(inp[2][1]);\r\n            setActiveStep(3);\r\n        }\r\n\r\n    };\r\n\r\n    const mintOption = () => {\r\n        console.log(\"Attempting to stake...\");\r\n        console.log(provider);\r\n        console.log(signer.getAddress());\r\n        setLoading(true);\r\n\r\n        mint(\r\n            parseFloat(field4Value),\r\n            coreAddress,\r\n            eventAddress,\r\n            signer\r\n        )\r\n            .then(() => {\r\n                setLoading(false);\r\n\r\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n                setField1Value(\"\");\r\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n            })\r\n            .catch((e) => {\r\n                setLoading(false);\r\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n                    variant: \"error\",\r\n                    autoHideDuration: 10000,\r\n                });\r\n            });\r\n    };\r\n    const burnOption = () => {\r\n        console.log(\"Attempting to stake...\");\r\n        console.log(provider);\r\n        console.log(signer.getAddress());\r\n        setLoading(true);\r\n\r\n        burn(\r\n            parseFloat(field4Value),\r\n            coreAddress,\r\n            eventAddress,\r\n            signer\r\n        )\r\n            .then(() => {\r\n                setLoading(false);\r\n\r\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n                setField1Value(\"\");\r\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n            })\r\n            .catch((e) => {\r\n                setLoading(false);\r\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n                    variant: \"error\",\r\n                    autoHideDuration: 10000,\r\n                });\r\n            });\r\n    };\r\n    const redeemOption = () => {\r\n        console.log(\"Attempting to stake...\");\r\n        console.log(provider);\r\n        console.log(signer.getAddress());\r\n        setLoading(true);\r\n\r\n        redeem(\r\n            parseFloat(field4Value),\r\n            coreAddress,\r\n            eventAddress,\r\n            signer\r\n        )\r\n            .then(() => {\r\n                setLoading(false);\r\n\r\n                // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n                setField1Value(\"\");\r\n                enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n            })\r\n            .catch((e) => {\r\n                setLoading(false);\r\n                enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n                    variant: \"error\",\r\n                    autoHideDuration: 10000,\r\n                });\r\n            });\r\n    };\r\n\r\n    // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n    // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n    // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n    // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n    // of the two coins change.\r\n\r\n    // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n    // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n    // the new reserves will be calculated.\r\n    // useEffect(() => {\r\n    //     console.log(\r\n    //         \"Trying to get Reserves between:\\n\" + option1.address + \"\\n\" + option2.address\r\n    //     );\r\n    //\r\n    //     if (option1.address) {\r\n    //         getReserves(option1.address, option2.address, eventAddress, signer, account).then(\r\n    //             (data) => setReserves(data)\r\n    //         );\r\n    //     }\r\n    // }, [option1.address, option2.address, account, factory, router, signer]);\r\n\r\n    // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n    // It attempts to calculate and set the state variable `field2Value`\r\n    // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n    // the value in the output box will change.\r\n    // useEffect(() => {\r\n    //     if (isNaN(parseFloat(field1Value))) {\r\n    //         setField2Value(\"\");\r\n    //     } else if (reserves[0] && reserves[1]) {\r\n    //         if (option2.isInsurer){\r\n    //             setField2Value(`${100*reserves[1]/reserves[0]}%`);\r\n    //         }else{\r\n    //             setField2Value(`${100*reserves[0]/reserves[1]}%`);\r\n    //\r\n    //         }\r\n    //\r\n    //         // getAmountOut(coin1.address, coin2.address, field1Value, router).then(\r\n    //         //   (amount) => setField2Value(amount.toFixed(7))\r\n    //         // );\r\n    //     } else {\r\n    //         setField2Value(\"\");\r\n    //     }\r\n    // }, [field1Value, coin1.address, coin2.address]);\r\n\r\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n    useEffect(() => {\r\n        const coinTimeout = setTimeout(() => {\r\n            console.log(\"Checking balances...\");\r\n    //\r\n    //         if (option1.address) {\r\n    //             getReserves(\r\n    //                 option1.address,\r\n    //                 coin2.address,\r\n    //                 eventAddress,\r\n    //                 signer,\r\n    //                 account\r\n    //             ).then((data) => setReserves(data));\r\n    //         }\r\n    //\r\n    //         if (option1.address) {\r\n    //             getOptionBalanceAndSymbol(option2.isInsurer, account, eventAddress, provider, signer).then(\r\n    //                 (data) => {\r\n    //                     setOption2({\r\n    //                         isCoin: false,\r\n    //                         isInsurer: option2.isInsurer,\r\n    //                         address: undefined,\r\n    //                         symbol: option2.symbol,\r\n    //                         balance: data.balance,\r\n    //                     });\r\n    //                 }\r\n    //             );\r\n    //         }\r\n            if (account) {\r\n                getBalanceAndSymbol(account, eventAddress, provider, signer).then(\r\n                    (data) => {\r\n                        setBalances({\r\n                            insurance: data.balances[0],\r\n                            insuranceSymbol: data.symbols[0],\r\n                            coverage: data.balances[1],\r\n                            coverageSymbol: data.symbols[1]\r\n                        });\r\n                    }\r\n                );\r\n            }\r\n        }, 5000);\r\n    \r\n        return () => clearTimeout(coinTimeout);\r\n    });\r\n\r\n    // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n    useEffect(() => {\r\n        getAccount().then((account) => {\r\n            setAccount(account);\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <HorizontalLinearStepper\r\n                activeStep = {activeStep}\r\n            />\r\n            {/* Dialog Windows */}\r\n            <InputDialog\r\n                open={dialog1Open}\r\n                onClose={onInput1Selected}\r\n                events={EVENTS.ALLEVENTS}\r\n                signer={signer}\r\n                heading = {\"Select Oracle ID\"}\r\n                isPasteAddress = {false}\r\n            />\r\n            <InputDialog\r\n                open={dialog2Open}\r\n                onClose={onInput2Selected}\r\n                events={input1.isSelected ? EVENTS.ALLEVENTS[input1.index].array : []}\r\n                signer={signer}\r\n                heading = {\"Select asset\"}\r\n                isPasteAddress = {false}\r\n            />\r\n            <InputDialog\r\n                open={dialog3Open}\r\n                onClose={onInput3Selected}\r\n                events={input2.isSelected ? EVENTS.ALLEVENTS[input1.index].array[input2.index].array : []}\r\n                signer={signer}\r\n                heading = {\"Select deadline\"}\r\n                isPasteAddress = {false}\r\n            />\r\n\r\n            {/* Manage insurance box */}\r\n            <Container maxWidth=\"sm\">\r\n                <Paper className={classes.paperContainer}>\r\n                    <Typography variant=\"h5\" className={classes.title}>\r\n                        How you doin today?\r\n                    </Typography>\r\n\r\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <CoinField\r\n                                activeField={true}\r\n                                value={field1Value}\r\n                                onClick={() => setDialog1Open(true)}\r\n                                placeholder={\"Select Oracle Id\"}\r\n                                symbol={input1.isSelected !== false ? \"Done\" : \"Select\"}\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <CoinField\r\n                                activeField={true}\r\n                                value={field2Value}\r\n                                onClick={() => setDialog2Open(true)}\r\n                                placeholder={\"Select asset\"}\r\n                                symbol={input2.isSelected !== false ? \"Done\" : \"Select\"}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <CoinField\r\n                                activeField={true}\r\n                                value={field3Value}\r\n                                onClick={() => setDialog3Open(true)}\r\n                                placeholder={\"Select deadline\"}\r\n                                symbol={input3.isSelected !== false ? \"Done\" : \"Select\"}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} className={classes.fullWidth}>\r\n                            <InputField\r\n                                activeField={true}\r\n                                value={field4Value}\r\n                                onClick={() => setDialog3Open(true)}\r\n                                onChange={handleChange.field4}\r\n                                placeholder={\"Enter amount $\"}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <hr className={classes.hr} />\r\n\r\n                        {/* Balance Display */}\r\n                        <Typography variant=\"h6\">Your Balances</Typography>\r\n\r\n                        <Typography variant=\"body1\" className={classes.balance}>\r\n                            {formatBalance(balances.insurance, balances.insuranceSymbol)}\r\n                            <br/>                      \r\n                            {formatBalance(balances.coverage, balances.coverageSymbol)}\r\n                        </Typography>\r\n\r\n\r\n\r\n                        <hr className={classes.hr} />\r\n\r\n                        <SplitButton\r\n                            onClick={[mintOption, burnOption, redeemOption, burnOption]}\r\n                            options = {['Mint','Burn','Redeem','Provide Liquidity']}\r\n                        >\r\n\r\n                        </SplitButton>\r\n\r\n                    </Grid>\r\n                </Paper>\r\n            </Container>\r\n\r\n            <Grid\r\n                container\r\n                className={classes.footer}\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"flex-end\"\r\n            >\r\n                <p>\r\n                    @Becoz-we-can labs\r\n                </p>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MintBurnLiquid;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport LiquidityDeployer from \"./LiquidityDeployer\";\r\nimport LiquidityRemover from \"./RemoveLiquidity\";\r\nimport MintBurnLiquid from \"./MintBurnLiquidity\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Liquidity() {\r\n  const classes = useStyles();\r\n\r\n  const [deploy, setDeploy] = React.useState(true);\r\n\r\n  const deploy_or_remove = (deploy) => {\r\n    if (deploy === true) {\r\n      return <MintBurnLiquid />\r\n      // return <LiquidityDeployer />;\r\n    }\r\n    return <LiquidityRemover />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MintBurnLiquid />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liquidity;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport logo from \"../assets/img/logo.svg\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n    marginTop: \"200px\",\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction ConnectWalletPage() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <div className=\"Title\">\r\n        <h1 className=\"navbar-logo\">\r\n          <img src={logo} className=\"logo\"></img>\r\n        </h1>\r\n      </div>\r\n\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n            color=\"common.white\"\r\n          >\r\n            Please connect an Ethereum wallet to your browser to use the\r\n            application\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnectWalletPage;\r\n","import { Contract, ethers } from \"ethers\";\r\nimport * as COINS from \"../constants/coins\";\r\n\r\nimport { fetchReserves } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const amountIn1 = ethers.utils.parseEther(amount1.toString());\r\n  const amountIn2 = ethers.utils.parseEther(amount2.toString());\r\n\r\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\r\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(amountIn1),\r\n    Number(amountIn2),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === COINS.AUTONITY.address) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === COINS.AUTONITY.address) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const liquidity = ethers.utils.parseEther(liquidity_tokens.toString());\r\n\r\n  const amount1Min = ethers.utils.parseEther(amount1min.toString());\r\n  const amount2Min = ethers.utils.parseEther(amount2min.toString());\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === COINS.AUTONITY.address) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === COINS.AUTONITY.address) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  const amountOut = Math.sqrt(amount2 * amount1);\r\n  return [amount2, amountOut];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    let amountOut = Math.sqrt(reserveA * reserveB);\r\n    return [\r\n      amountADesired.toString(),\r\n      amountBDesired.toString(),\r\n      amountOut.toString(),\r\n    ];\r\n  } else {\r\n    let [amountBOptimal, amountOut] = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      return [\r\n        amountADesired.toString(),\r\n        amountBOptimal.toString(),\r\n        amountOut.toString(),\r\n      ];\r\n    } else {\r\n      let [amountAOptimal, amountOut] = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      console.log(amountAOptimal, amountOut);\r\n      return [\r\n        amountAOptimal.toString(),\r\n        amountBDesired.toString(),\r\n        amountOut.toString(),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport {Container, Grid, makeStyles, Paper, Typography} from \"@material-ui/core\";\r\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  getReserves, getOptionBalanceAndSymbol, deployEvent\r\n} from \"../ethereumFunctions\";\r\n\r\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\r\n\r\nimport CoinField from \"../CoinSwapper/CoinField\";\r\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport InputField from \"../Liquidity/components/InputField\";\r\nimport * as COINS from \"../constants/coins\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n    paddingBottom: theme.spacing(3),\r\n    width: \"40%\",\r\n    overflow: \"wrap\",\r\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\r\n    color: \"white\",\r\n  },\r\n  paperContainer1: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    backgroundColor: '#dfe1f5'\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  values: {\r\n    width: \"50%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1),\r\n    padding: theme.spacing(0.4),\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction OracleDeployer(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n  const [account, setAccount] = React.useState(undefined); // This is populated in a react hook\r\n\r\n  const [weth, setWeth] = React.useState(\r\n    getWeth(\"0x3f0D1FAA13cbE43D662a37690f0e8027f9D89eBF\", signer)\r\n  );\r\n\r\n  const [coreAddress, setCoreAddress] = React.useState(\r\n      \"0xde68D58ba403be67703B903c99932A854A233dEF\"\r\n  );\r\n\r\n\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n  const [field3Value, setField3Value] = React.useState(\"\");\r\n  const [field4Value, setField4Value] = React.useState(\"\");\r\n  const [field5Value, setField5Value] = React.useState(\"\");\r\n  const [field6Value, setField6Value] = React.useState(\"\");\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n   // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n    field2: (e) => {\r\n      setField2Value(e.target.value);\r\n    },\r\n    field3: (e) => {\r\n      setField3Value(e.target.value);\r\n    },\r\n    field4: (e) => {\r\n      setField4Value(e.target.value);\r\n    },\r\n    field5: (e) => {\r\n      setField5Value(e.target.value);\r\n    },\r\n    field6: (e) => {\r\n      setField6Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // // Turns the account's balance into something nice and readable\r\n  // const formatBalance = (balance, symbol) => {\r\n  //   if (balance && symbol)\r\n  //     return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n  //   else return \"0.0\";\r\n  // };\r\n  //\r\n  // // Turns the coin's reserves into something nice and readable\r\n  // const formatReserve = (reserve, symbol) => {\r\n  //   if (reserve && symbol) return reserve + \" \" + symbol;\r\n  //   else return \"0.0\";\r\n  // };\r\n  //\r\n  // // Determines whether the button should be enabled or not\r\n  // const isButtonEnabled = () => {\r\n  //   let validFloat = new RegExp(\"^[0-9]*[.,]?[0-9]*$\");\r\n  //\r\n  //   // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\r\n  //   return (\r\n  //     coin1.address &&\r\n  //     coin2.address &&\r\n  //     validFloat.test(field1Value) &&\r\n  //     validFloat.test(field2Value) &&\r\n  //     parseFloat(field1Value) <= coin1.balance &&\r\n  //     parseFloat(field2Value) <= coin2.balance\r\n  //   );\r\n  // };\r\n\r\n  const deploy = () => {\r\n    console.log(\"Attempting to deploy liquidity...\");\r\n    setLoading(true);\r\n\r\n    deployEvent(\r\n      field1Value,\r\n      field2Value,\r\n      field3Value,\r\n      field4Value,\r\n      parseFloat(field5Value),\r\n        parseFloat(field6Value),\r\n      coreAddress,\r\n      signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        setField2Value(\"\");\r\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\r\n         variant: \"error\",\r\n         autoHideDuration: 10000,\r\n       });\r\n      });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* Oracle deployer */}\r\n      {/*<Container maxWidth=\"sm\" >*/}\r\n        <Paper className={classes.paperContainer1} >\r\n      <Typography variant=\"h5\" className={classes.title}>\r\n        Provide details about the insurance event:\r\n      </Typography>\r\n\r\n\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2} sm={\"auto\"} >\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field1Value}\r\n              onChange={handleChange.field1}\r\n              placeholder = {\"Name\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field2Value}\r\n              onChange={handleChange.field2}\r\n              placeholder = {\"Duration\"}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field3Value}\r\n              onChange={handleChange.field3}\r\n              placeholder = {\"Oracle address\"}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field4Value}\r\n              onChange={handleChange.field4}\r\n              placeholder = {\"Asset address\"}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field5Value}\r\n              onChange={handleChange.field5}\r\n              placeholder = {\"Settle ratio\"}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={8} className={classes.fullWidth}>\r\n          <InputField\r\n              activeField={true}\r\n              value={field6Value}\r\n              onChange={handleChange.field6}\r\n              placeholder = {\"token ratio\"}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n          <hr className={classes.hr} />\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        <LoadingButton\r\n          loading={loading}\r\n          valid={true}\r\n          success={false}\r\n          fail={false}\r\n          onClick={deploy}\r\n        >\r\n          <AccountBalanceIcon className={classes.buttonIcon} />\r\n          Deploy\r\n        </LoadingButton>\r\n      </Grid>\r\n        </Paper>\r\n      {/*</Container>*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OracleDeployer;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport SwitchButton from \"./SwitchButton\";\r\nimport OracleDeployer from \"./OracleDeployer\";\r\n// import LiquidityRemover from \"./RemoveLiquidity\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n    maxWidth: 700,\r\n    margin: \"auto\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  footer: {\r\n    marginTop: \"155px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Oracle() {\r\n  const classes = useStyles();\r\n\r\n  const [deploy, setDeploy] = React.useState(true);\r\n\r\n  const deploy_or_remove = () => {\r\n\r\n    return <OracleDeployer />;\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Paper className={classes.paperContainer}>\r\n          {/*<Typography variant=\"h5\" className={classes.title}>*/}\r\n          {/*  <SwitchButton setDeploy={setDeploy} />*/}\r\n          {/*</Typography>*/}\r\n\r\n          {/*{deploy_or_remove(deploy)}*/}\r\n          {deploy_or_remove()}\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Becoz-we-can labs | Get ETH from the Ropsten testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Oracle;\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport {Link, Route} from \"react-router-dom\";\r\nimport { MenuItems } from \"./MenuItems\";\r\nimport {Component} from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport CoinSwapper from \"../CoinSwapper/CoinSwapper\";\r\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\r\nimport {ethers} from \"ethers\";\r\nimport {SnackbarProvider} from \"notistack\";\r\nimport NarBar from \"./NavBar\";\r\nimport Oracle from \"../Oracle/Oracle\";\r\nimport Liquidity from \"../Liquidity/Liquidity\";\r\nimport ConnectWalletPage from \"../Components/connectWalletPage\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#757ce8',\r\n            main: '#3f50b5',\r\n            dark: '#002884',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: \"#9e9e9e\",\r\n            contrastText: \"#ffffff\",\r\n        },\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                // <Box sx={{ p: 3 }}>\r\n                    <div className=\"App\">\r\n                        <SnackbarProvider maxSnack={3}>\r\n                            <ThemeProvider theme={theme}>\r\n                                {/*<VerticalTabs/>*/}\r\n\r\n                                {/*<NarBar />*/}\r\n                                <Route\r\n                                    exact\r\n                                    path=\"/marketplace/\"\r\n                                    component={CoinSwapper}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path=\"/oracle/\"\r\n                                    component={Oracle}\r\n                                />\r\n                                <Route\r\n                                    exact\r\n                                    path=\"/liquidity/\"\r\n                                    component={Liquidity}\r\n                                />\r\n                            </ThemeProvider>\r\n                        </SnackbarProvider>\r\n                    </div>\r\n                // </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\nexport default function VerticalTabs() {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{ flexGrow: 1, bgcolor: 'azure', display: 'flex', height:824 }}\r\n        >\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                centered\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                sx={{ borderRight: 1, borderColor: 'divider' }}\r\n            >\r\n                {MenuItems.map((item, index) => {\r\n                    return (\r\n                        <Tab label ={item.title}\r\n                             className={item.cName}\r\n                             component = {Link}\r\n                             to = {item.url}\r\n                        />\r\n                        );\r\n                })\r\n                }\r\n\r\n            </Tabs>\r\n            <TabPanel value={value} index={0} >\r\n               children: {CoinSwapper}\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                Item Three\r\n            </TabPanel>\r\n\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport logo from \"../assets/img/logo.svg\";\r\nimport {MenuItems} from \"./MenuItems\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst drawerWidth = 300;\r\n\r\nexport default function PermanentDrawerLeft() {\r\n    return (\r\n        // <div>\r\n        <Box\r\n            // sx={{ display: 'block' }}\r\n        >\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                sx={{ width: `calc(100% - ${drawerWidth}px)`, ml: `${drawerWidth}px` }}\r\n            >\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" noWrap component=\"div\">\r\n                        Decentralized insurance protocol\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                sx={{\r\n                    width: drawerWidth,\r\n                    flexShrink: 0,\r\n                    '& .MuiDrawer-paper': {\r\n                        width: drawerWidth,\r\n                        boxSizing: 'border-box',\r\n                    },\r\n                }}\r\n                variant=\"permanent\"\r\n                anchor=\"left\"\r\n            >\r\n                <Toolbar>\r\n                    {/*<div className=\"Title\">*/}\r\n                        <h2 className=\"navbar-logo\">\r\n                            <img src={logo} className=\"logo\" width = \"150\" ></img>\r\n                        </h2>\r\n                    {/*</div>*/}\r\n                </Toolbar>\r\n                <Divider />\r\n\r\n                {MenuItems.map((item, index) => {\r\n                    return (\r\n                        <Tab\r\n                            sx={{ typography: \"body1\", fontWeight: 'bold', fontSize: \"h6.fontSize\", fontFamily:\"monospace\", textTransform: \"capitalize\"}}\r\n                            label ={item.title}\r\n                             className={item.cName}\r\n                             component = {Link}\r\n                             to = {item.url}\r\n                        />\r\n                    );\r\n                })\r\n                }\r\n\r\n            </Drawer>\r\n            <Box\r\n                component=\"main\"\r\n                sx={{ flexGrow: 1, bgcolor: 'background.default', p: 3 }}\r\n            >\r\n                <Toolbar />\r\n\r\n            </Box>\r\n        </Box>\r\n        // </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport NarBar from \"./NavBar/NavBar\";\r\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport Liquidity from \"./Liquidity/Liquidity\";\r\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport Oracle from \"./Oracle/Oracle\";\r\nimport VerticalTabs from \"./NavBar/VerticalBar\"\r\nimport PermanentDrawerLeft from \"./NavBar/Drawer\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#3f50b5',\r\n      dark: '#002884',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      main: \"#9e9e9e\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  // Check if wallet is here:\r\n  try {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    return (\r\n      <div className=\"App\">\r\n        <SnackbarProvider maxSnack={3}>\r\n          <ThemeProvider theme={theme}>\r\n            {/*<VerticalTabs/>*/}\r\n            <PermanentDrawerLeft />\r\n            {/*<NarBar />*/}\r\n            <Route\r\n              exact\r\n              path=\"/marketplace/\"\r\n              component={CoinSwapper}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/oracle/\"\r\n              component={Oracle}\r\n            />\r\n            <Route\r\n                exact\r\n                path=\"/liquidity/\"\r\n                component={Liquidity}\r\n            />\r\n          </ThemeProvider>\r\n        </SnackbarProvider>\r\n      </div>\r\n    );\r\n  } catch (err) {\r\n    return (\r\n      <div className=\"App\">\r\n        <SnackbarProvider maxSnack={3}>\r\n          <ThemeProvider theme={theme}>\r\n            <ConnectWalletPage />\r\n          </ThemeProvider>\r\n        </SnackbarProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}